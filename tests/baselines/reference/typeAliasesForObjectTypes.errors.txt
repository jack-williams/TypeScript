tests/cases/conformance/types/typeAliases/typeAliasesForObjectTypes.ts(10,6): error TS2300: Duplicate identifier 'T2'.
tests/cases/conformance/types/typeAliases/typeAliasesForObjectTypes.ts(11,6): error TS2300: Duplicate identifier 'T2'.
tests/cases/conformance/types/typeAliases/typeAliasesForObjectTypes.ts(26,3): error TS2339: Property 'b' does not exist on type 'Required<{ a?: 1; x: 1; }>'.
tests/cases/conformance/types/typeAliases/typeAliasesForObjectTypes.ts(27,3): error TS2339: Property 'a' does not exist on type 'Required<{ b?: 1; x: 1; }>'.


==== tests/cases/conformance/types/typeAliases/typeAliasesForObjectTypes.ts (4 errors) ====
    type T1 = { x: string }
    
    // An interface can be named in an extends or implements clause, but a type alias for an object type literal cannot.
    interface I1 extends T1 { y: string }
    class C1 implements T1 {
        x: string;
    }
    
    // An interface can have multiple merged declarations, but a type alias for an object type literal cannot.
    type T2 = { x: string }
         ~~
!!! error TS2300: Duplicate identifier 'T2'.
    type T2 = { y: number }
         ~~
!!! error TS2300: Duplicate identifier 'T2'.
    
    // An interface can have type parameters, but a type alias for an object type literal cannot.
    type T3<T> = { x: T }
    
    
    // Repro from #29991
    
    const a: Required<{ a?: 1; x: 1 }> = { a: 1, x: 1 };
    const b: Required<{ b?: 1; x: 1 }> = { b: 1, x: 1 };
    export let A = a;
    export let B = b;
    A = b; // No Error
    B = a; // No Error
    
    a.b; // Property 'b' does not exist on type 'Required<{ a?: 1; x: 1; }>'.
      ~
!!! error TS2339: Property 'b' does not exist on type 'Required<{ a?: 1; x: 1; }>'.
    b.a; // Property 'a' does not exist on type 'Required<{ b?: 1; x: 1; }>'.
      ~
!!! error TS2339: Property 'a' does not exist on type 'Required<{ b?: 1; x: 1; }>'.
    